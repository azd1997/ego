// 日志库
//
// 1. 背景：1)程序运行是个黑盒；2）日志是程序的外在表现；3）通过日志可以知道程序的健康状态
//
// 2. 日志打印级别: Debug(调试，日志最详细)、Trace(追踪问题)、Info(打印比较重要的信息，比如访问日志)、
// 	  Warn(警告，出现了潜在的问题)、Error(错误，但不影响程序运行)、Fatal(致命错误，导致程序退出)
//
// 3. 日志存储：控制台输出；文件；数据库；网络中，例如Kafka队列 。
// 	  从这点来看，使用io.WriterCloser接口作为输出，比较合理
//
// 4. 使用接口的优点：定义日志库的规范；
package elog2



